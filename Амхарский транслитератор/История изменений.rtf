{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf110
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\froman\fcharset0 Times-Roman;\f2\fnil\fcharset0 Kefa-Regular;
\f3\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red45\green101\blue22;\red0\green0\blue0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11780\viewh13800\viewkind0
\deftab720
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u1042 \u1089 \u1105  \u1086 \u1082 , \u1087 \u1088 \u1086 \u1073 \u1077 \u1083 \u1099  \u1091 \u1073 \u1088 \u1072 \u1083  \u1089 \u1090 \u1088 \u1080 \u1087 \u1086 \u1084 :
\f1\b0\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = \{\}
\f1\fs24 \

\f0\fs32 line = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countcolumns = 0 \'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.split('\\t')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0ch = ch.strip()
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines == 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0vocals.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns == 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0consonants.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0alphabet[ch] = consonants[countlines-1]+vocals[countcolumns-1]
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0countcolumns+=1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countlines+=1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 f1 = open ('Text_1.txt', 'r', encoding = 'utf8')
\f1\fs24 \

\f0\fs32 text = f1.read()
\f1\fs24 \

\f0\fs32 f2 = open ('Text_2.txt', 'w', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for key, value in alphabet.items():
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0text = text.replace(key, value)
\f1\fs24 \

\f0\fs32 f2.write(text)
\f1\fs24 \

\f0\fs32 f1.close()
\f1\fs24 \

\f0\fs32 f2.close()
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf2 \strokec2 \uc0\u1042 \u1089 \u1105  \u1086 \u1082 , \u1085 \u1086  \u1090 \u1086 \u1083 \u1100 \u1082 \u1086  \u1077 \u1089 \u1083 \u1080  \u1072 \u1084 \u1093 \u1072 \u1088 \u1089 \u1082 \u1080 \u1077  \u1073 \u1091 \u1082 \u1074 \u1099  \u1080 \u1076 \u1091 \u1090  \u1095 \u1077 \u1088 \u1077 \u1079  \u1087 \u1088 \u1086 \u1073 \u1077 \u1083 \u1099  \u1074  \u1092 \u1072 \u1081 \u1083 \u1077  \'93Text_1\'94:
\f1\b0\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = \{\}
\f1\fs24 \

\f0\fs32 line = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countcolumns = 0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.split('\\t') \'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines == 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0vocals.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns == 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0consonants.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0alphabet[ch] = consonants[countlines-1]+vocals[countcolumns-1]
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0countcolumns+=1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countlines+=1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 f1 = open ('Text_1.txt', 'r', encoding = 'utf8')
\f1\fs24 \

\f0\fs32 text = f1.read()
\f1\fs24 \

\f0\fs32 f2 = open ('Text_2.txt', 'w', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for key, value in alphabet.items():
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0text = text.replace(key, value)
\f1\fs24 \

\f0\fs32 f2.write(text)
\f1\fs24 \

\f0\fs32 f1.close()
\f1\fs24 \

\f0\fs32 f2.close()
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = \{\}
\f1\fs24 \

\f0\fs32 line = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countcolumns = 0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.split('\\t') \'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines == 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0vocals.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns == 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0consonants.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0alphabet[ch] = consonants[countlines-1] + vocals[countcolumns-1]
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0countcolumns+=1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countlines+=1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32 f1 = open ('Text_1.txt', 'r', encoding = 'utf8')
\f1\fs24 \

\f0\fs32 text = f1.read()
\f1\fs24 \

\f0\fs32 f2 = open ('Text_2.txt', 'w', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for key, value in alphabet.items():
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0text = text.replace(key, value)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32 print(text)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf2 \strokec2 \uc0\u1058 \u1088 \u1072 \u1085 \u1089 \u1083 \u1080 \u1090 \u1077 \u1088 \u1080 \u1088 \u1086 \u1074 \u1072 \u1083  \u1087 \u1072 \u1088 \u1091  \u1073 \u1091 \u1082 \u1074 . \u1055 \u1086 \u1095 \u1077 \u1084 \u1091 -\u1090 \u1086  \u1085 \u1077  \u1074 \u1089 \u1077 :
\f1\b0\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = \{\}
\f1\fs24 \

\f0\fs32 line = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countcolumns = 0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.split('\\t') \'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines == 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0vocals.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns == 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0consonants.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0alphabet[ch] = consonants[countlines-1] + vocals[countcolumns-1]
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0countcolumns+=1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countlines+=1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32 f1 = open ('Text_1.txt', 'r', encoding = 'utf8')
\f1\fs24 \

\f0\fs32 text = f1.read()
\f1\fs24 \

\f0\fs32 f2 = open ('Text_2.txt', 'w', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for key, value in alphabet.items():
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0text = text.replace(key, value)
\f1\fs24 \

\f0\fs32 print(text)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf3 \uc0\u1056 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 :
\f1\b0\fs24 \
\pard\pardeftab720\sl380\partightenfactor0

\f2\fs32 \cf3 \uc0\u4840 \u4768 \u4635 \u4653 
\f0 \'f1 a 
\f2 \uc0\u4778 
\f0 b o
\f2 \uc0\u4653 \u4853 
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf2 \strokec2 \uc0\u1048 \u1079 \u1074 \u1083 \u1077 \u1095 \u1077 \u1085 \u1080 \u1077  \u1076 \u1072 \u1085 \u1085 \u1099 \u1093  \u1080 \u1079  \u1089 \u1083 \u1086 \u1074 \u1072 \u1088 \u1103 :
\f1\b0\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 l = \{'george':16,'amber':19\}
\f1\fs24 \

\f0\fs32 for k, v in l.items():
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0print(k, v)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf3 \uc0\u1056 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 :
\f1\b0\fs24 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 amber 19
\f1\fs24 \

\f0\fs32 george 16
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 l = \{'george':16,'amber':19\}
\f1\fs24 \

\f0\fs32 for k, v in l.items():
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0print(v)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf3 \uc0\u1056 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 :
\f1\b0\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 19
\f1\fs24 \

\f0\fs32 16
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf2 \strokec2 \uc0\u1048 \u1079 \u1074 \u1083 \u1077 \u1095 \u1077 \u1085 \u1080 \u1077  \u1076 \u1072 \u1085 \u1085 \u1099 \u1093  \u1080 \u1079  \u1089 \u1083 \u1086 \u1074 \u1072 \u1088 \u1103 :
\f1\b0\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 my = \{'value': 'apple', 'blah': 2\}
\f1\fs24 \

\f0\fs32 print(my.values())
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf3 \uc0\u1056 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 :
\f1\b0\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 dict_values([2, 'apple'])
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 l = [\{'value': 'apple', 'blah': 2\}, \{'value': 'banana', 'blah': 3\} , \{'value': 'cars', 'blah':4\}]
\f1\fs24 \

\f0\fs32 print([d['value'] for d in l])
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf3 \uc0\u1056 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 :
\f1\b0\fs24 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 ['apple', 'banana', 'cars']
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf2 \strokec2 \uc0\u1055 \u1088 \u1086 \u1084 \u1077 \u1078 \u1091 \u1090 \u1086 \u1095 \u1085 \u1086 \u1077 : \u1082 \u1072 \u1082  \u1080 \u1079 \u1074 \u1083 \u1077 \u1095 \u1100  \u1082 \u1083 \u1102 \u1095 \u1080  \u1080  \u1080 \u1093  \u1079 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1103  \u1080 \u1079  \u1089 \u1083 \u1086 \u1074 \u1072 \u1088 \u1103 :
\f1\b0\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 newdict = \{1:0, 2:0, 3:0\}
\f1\fs24 \

\f0\fs32 for i in newdict.values():
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0print(i)
\f1\fs24 \

\f0\fs32 for n in newdict.keys():
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0print(n)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf3 \uc0\u1056 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 :
\f1\b0\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 0
\f1\fs24 \

\f0\fs32 0
\f1\fs24 \

\f0\fs32 0
\f1\fs24 \

\f0\fs32 1
\f1\fs24 \

\f0\fs32 2
\f1\fs24 \

\f0\fs32 3
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf3 \uc0\u1063 \u1077 \u1088 \u1085 \u1086 \u1074 \u1080 \u1082 :
\f1\b0\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = \{\}
\f1\fs24 \

\f0\fs32 line = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countcolumns = 0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.split('\\t') \'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines == 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0vocals.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns == 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0consonants.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0alphabet[ch] = consonants[countlines-1] + vocals[countcolumns-1]
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0countcolumns+=1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countlines+=1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32 f1 = open ('Text_1.txt', 'r', encoding = 'utf8')
\f1\fs24 \

\f0\fs32 text = f1.read()
\f1\fs24 \

\f0\fs32 f2 = open ('Text_2.txt', 'w', encoding = 'utf8')
\f1\fs24 \

\f0\fs32 for letter in text:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0ch1 = alphabet.items()
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0text = text.replace(ch0, ch1)
\f1\fs24 \

\f0\fs32 print(text)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf2 \strokec2 \uc0\u1055 \u1086 \u1083 \u1091 \u1095 \u1080 \u1083 \u1089 \u1103  \u1089 \u1083 \u1086 \u1074 \u1072 \u1088 \u1080 \u1082  \u1089  \u1074 \u1077 \u1088 \u1085 \u1099 \u1084 \u1080  \u1079 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1103 \u1084 \u1080 :
\f1\b0\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = \{\}
\f1\fs24 \

\f0\fs32 line = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countcolumns = 0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.split('\\t') \'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines == 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0vocals.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns == 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0consonants.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0alphabet[ch] = consonants[countlines-1] + vocals[countcolumns-1]
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0countcolumns+=1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countlines+=1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32 print(alphabet)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf3 \uc0\u1056 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 :
\f1\b0\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 \{'
\f2 \uc0\u4929 
\f0  ': "s' u ", '
\f2 \uc0\u4841 
\f0  ': 'y u ', '
\f2 \uc0\u4849 
\f0  ': 'd u ', '
\f2 \uc0\u4901 
\f0  ': "t' \uc0\u601  ", '
\f2 \uc0\u4939 
\f0  ': 'f a ', '
\f2 \uc0\u4920 
\f0  ': "s' \'e4 ", '
\f2 \uc0\u4809 
\f0  ': 'w u ', '
\f2 \uc0\u4794 
\f0  ': 'h i ', '
\f2 \uc0\u4725 
\f0  ': 't \uc0\u601  ', '
\f2 \uc0\u4709 
\f0  ': 'b \uc0\u601  ', '
\f2 \uc0\u4608 
\f0  ': 'h \'e4 ', '
\f2 \uc0\u4657 
\f0  ': 's u ', '
\f2 \uc0\u4818 
\f0  ': '\uc0\u702  i ', '
\f2 \uc0\u4940 
\f0  ': 'f e ', '
\f2 \uc0\u4642 
\f0  ': 's i ', '
\f2 \uc0\u4925 
\f0  ': "s' \uc0\u601  ", '
\f2 \uc0\u4933 
\f0  ': "s' \uc0\u601  ", '
\f2 \uc0\u4873 
\f0  ': 'g u ', '
\f2 \uc0\u4768 
\f0  ': '\uc0\u702  \'e4 ', '
\f2 \uc0\u4742 
\f0 ': 'h o', '
\f2 \uc0\u4909 
\f0  ': "\uc0\u269 ' \u601  ", '
\f2 \uc0\u4826 
\f0  ': 'z i ', '
\f2 \uc0\u4610 
\f0  ': 'h i ', '
\f2 \uc0\u4811 
\f0  ': 'w a ', '
\f2 \uc0\u4656 
\f0  ': 's \'e4 ', '
\f2 \uc0\u4660 
\f0  ': 's e ', '
\f2 \uc0\u4897 
\f0  ': "t' u ", '
\f2 \uc0\u4938 
\f0  ': 'f i ', '
\f2 \uc0\u4900 
\f0  ': "t' e ", '
\f2 \uc0\u4928 
\f0  ': "s' \'e4 ", '
\f2 \uc0\u4734 
\f0 ': '\uc0\u269  o', '
\f2 \uc0\u4720 
\f0  ': 't \'e4 ', '
\f2 \uc0\u4621 
\f0  ': 'l \uc0\u601  ', '
\f2 \uc0\u4878 
\f0 ': 'g o', '
\f2 \uc0\u4644 
\f0  ': 's e ', '
\f2 \uc0\u4780 
\f0  ': 'k e ', '
\f2 \uc0\u4677 
\f0  ': 'q \uc0\u601  ', '
\f2 \uc0\u4645 
\f0  ': 's \uc0\u601  ', '
\f2 \uc0\u4931 
\f0  ': "s' a ", '
\f2 \uc0\u4667 
\f0  ': '\'9a a ', '
\f2 \uc0\u4624 
\f0  ': 'h \'e4 ', '
\f2 \uc0\u4904 
\f0  ': "\uc0\u269 ' \'e4 ", '
\f2 \uc0\u4877 
\f0  ': 'g \uc0\u601  ', '
\f2 \uc0\u4924 
\f0  ': "s' e ", '
\f2 \uc0\u4614 
\f0 ': 'h o', '
\f2 \uc0\u4832 
\f0  ': '\'9e \'e4 ', '
\f2 \uc0\u4632 
\f0  ': 'm \'e4 ', '
\f2 \uc0\u4664 
\f0  ': '\'9a \'e4 ', '
\f2 \uc0\u4668 
\f0  ': '\'9a e ', '
\f2 \uc0\u4921 
\f0  ': "s' u ", '
\f2 \uc0\u4824 
\f0  ': 'z \'e4 ', '
\f2 \uc0\u4798 
\f0 ': 'h o', '
\f2 \uc0\u4708 
\f0  ': 'b e ', '
\f2 \uc0\u4948 
\f0  ': 'p e ', '
\f2 \uc0\u4778 
\f0  ': 'k i ', '
\f2 \uc0\u4777 
\f0  ': 'k u ', '
\f2 \uc0\u4736 
\f0  ': 'h \'e4 ', '
\f2 \uc0\u4922 
\f0  ': "s' i ", '
\f2 \uc0\u4613 
\f0  ': 'h \uc0\u601  ', '
\f2 \uc0\u4776 
\f0  ': 'k \'e4 ', '
\f2 \uc0\u4816 
\f0  ': '\uc0\u702  \'e4 ', '
\f2 \uc0\u4854 
\f0 ': 'd o', '
\f2 \uc0\u4762 
\f0  ': '\'f1 i ', '
\f2 \uc0\u4757 
\f0  ': 'n \uc0\u601  ', '
\f2 \uc0\u4946 
\f0  ': 'p i ', '
\f2 \uc0\u4926 
\f0 ': "s' o", '
\f2 \uc0\u4850 
\f0  ': 'd i ', '
\f2 \uc0\u4837 
\f0  ': '\'9e \uc0\u601  ', '
\f2 \uc0\u4650 
\f0  ': 'r i ', '
\f2 \uc0\u4641 
\f0  ': 's u ', '
\f2 \uc0\u4866 
\f0  ': '\uc0\u487  i ', '
\f2 \uc0\u4609 
\f0  ': 'h u ', '
\f2 \uc0\u4941 
\f0  ': 'f \uc0\u601  ', '
\f2 \uc0\u4836 
\f0  ': '\'9e e ', '
\f2 \uc0\u4932 
\f0  ': "s' e ", '
\f2 \uc0\u4752 
\f0  ': 'n \'e4 ', '
\f2 \uc0\u4793 
\f0  ': 'h u ', '
\f2 \uc0\u4674 
\f0  ': 'q i ', '
\f2 \uc0\u4771 
\f0  ': '\uc0\u702  a ', '
\f2 \uc0\u4942 
\f0 ': 'f o', '
\f2 \uc0\u4763 
\f0  ': '\'f1 a ', '
\f2 \uc0\u4822 
\f0 ': '\uc0\u702  o', '
\f2 \uc0\u4661 
\f0  ': 's \uc0\u601  ', '
\f2 \uc0\u4916 
\f0  ': "p' e ", '
\f2 \uc0\u4627 
\f0  ': 'h a ', '
\f2 \uc0\u4670 
\f0 ': '\'9a o', '
\f2 \uc0\u4830 
\f0 ': 'z o', '
\f2 \uc0\u4821 
\f0  ': '\uc0\u702  \u601  ', '
\f2 \uc0\u4905 
\f0  ': "\uc0\u269 ' u ", '
\f2 \uc0\u4765 
\f0  ': '\'f1 \uc0\u601  ', '
\f2 \uc0\u4795 
\f0  ': 'h a ', '
\f2 \uc0\u4913 
\f0  ': "p' u ", '
\f2 \uc0\u4852 
\f0  ': 'd e ', '
\f2 \uc0\u4899 
\f0  ': "t' a ", '
\f2 \uc0\u4865 
\f0  ': '\uc0\u487  u ', '
\f2 \uc0\u4634 
\f0  ': 'm i ', '
\f2 \uc0\u4810 
\f0  ': 'w i ', '
\f2 \uc0\u4835 
\f0  ': '\'9e a ', '
\f2 \uc0\u4619 
\f0  ': 'l a ', '
\f2 \uc0\u4907 
\f0  ': "\uc0\u269 ' a ", '
\f2 \uc0\u4733 
\f0  ': '\uc0\u269  \u601  ', '
\f2 \uc0\u4817 
\f0  ': '\uc0\u702  u ', '
\f2 \uc0\u4930 
\f0  ': "s' i ", '
\f2 \uc0\u4630 
\f0 ': 'h o', '
\f2 \uc0\u4853 
\f0  ': 'd \uc0\u601  ', '
\f2 \uc0\u4611 
\f0  ': 'h a ', '
\f2 \uc0\u4910 
\f0 ': "\uc0\u269 ' o", '
\f2 \uc0\u4838 
\f0 ': '\'9e o', '
\f2 \uc0\u4844 
\f0  ': 'y e ', '
\f2 \uc0\u4618 
\f0  ': 'l i ', '
\f2 \uc0\u4774 
\f0 ': '\uc0\u702  o', '
\f2 \uc0\u4876 
\f0  ': 'g e ', '
\f2 \uc0\u4833 
\f0  ': '\'9e u ', '
\f2 \uc0\u4848 
\f0  ': 'd \'e4 ', '
\f2 \uc0\u4620 
\f0  ': 'l e ', '
\f2 \uc0\u4758 
\f0 ': 'n o', '
\f2 \uc0\u4617 
\f0  ': 'l u ', '
\f2 \uc0\u4843 
\f0  ': 'y a ', '
\f2 \uc0\u4782 
\f0 ': 'k o', '
\f2 \uc0\u4669 
\f0  ': '\'9a \uc0\u601  ', '
\f2 \uc0\u4870 
\f0 ': '\uc0\u487  o', '
\f2 \uc0\u4773 
\f0  ': '\uc0\u702  \u601  ', '
\f2 \uc0\u4827 
\f0  ': 'z a ', '
\f2 \uc0\u4723 
\f0  ': 't a ', '
\f2 \uc0\u4756 
\f0  ': 'n e ', '
\f2 \uc0\u4626 
\f0  ': 'h i ', '
\f2 \uc0\u4633 
\f0  ': 'm u ', '
\f2 \uc0\u4707 
\f0  ': 'b a ', '
\f2 \uc0\u4936 
\f0  ': 'f \'e4 ', '
\f2 \uc0\u4646 
\f0 ': 's o', '
\f2 \uc0\u4912 
\f0  ': "p' \'e4 ", '
\f2 \uc0\u4769 
\f0  ': '\uc0\u702  u ', '
\f2 \uc0\u4867 
\f0  ': '\uc0\u487  a ', '
\f2 \uc0\u4828 
\f0  ': 'z e ', '
\f2 \uc0\u4706 
\f0  ': 'b i ', '
\f2 \uc0\u4808 
\f0  ': 'w \'e4 ', '
\f2 \uc0\u4732 
\f0  ': '\uc0\u269  e ', '
\f2 \uc0\u4666 
\f0  ': '\'9a i ', '
\f2 \uc0\u4761 
\f0  ': '\'f1 u ', '
\f2 \uc0\u4872 
\f0  ': 'g \'e4 ', '
\f2 \uc0\u4792 
\f0  ': 'h \'e4 ', '
\f2 \uc0\u4640 
\f0  ': 's \'e4 ', '
\f2 \uc0\u4944 
\f0  ': 'p \'e4 ', '
\f2 \uc0\u4898 
\f0  ': "t' i ", '
\f2 \uc0\u4672 
\f0  ': 'q \'e4 ', '
\f2 \uc0\u4945 
\f0  ': 'p u ', '
\f2 \uc0\u4864 
\f0  ': '\uc0\u487  \'e4 ', '
\f2 \uc0\u4868 
\f0  ': '\uc0\u487  e ', '
\f2 \uc0\u4820 
\f0  ': '\uc0\u702  e ', '
\f2 \uc0\u4875 
\f0  ': 'g a ', '
\f2 \uc0\u4834 
\f0  ': '\'9e i ', '
\f2 \uc0\u4825 
\f0  ': 'z u ', '
\f2 \uc0\u4722 
\f0  ': 't i ', '
\f2 \uc0\u4636 
\f0  ': 'm e ', '
\f2 \uc0\u4915 
\f0  ': "p' a ", '
\f2 \uc0\u4710 
\f0 ': 'b o', '
\f2 \uc0\u4629 
\f0  ': 'h \uc0\u601  ', '
\f2 \uc0\u4949 
\f0  ': 'p \uc0\u601  ', '
\f2 \uc0\u4652 
\f0  ': 'r e ', '
\f2 \uc0\u4704 
\f0  ': 'b \'e4 ', '
\f2 \uc0\u4869 
\f0  ': '\uc0\u487  \u601  ', '
\f2 \uc0\u4730 
\f0  ': '\uc0\u269  i ', '
\f2 \uc0\u4874 
\f0  ': 'g i ', '
\f2 \uc0\u4755 
\f0  ': 'n a ', '
\f2 \uc0\u4673 
\f0  ': 'q u ', '
\f2 \uc0\u4753 
\f0  ': 'n u ', '
\f2 \uc0\u4896 
\f0  ': "t' \'e4 ", '
\f2 \uc0\u4917 
\f0  ': "p' \uc0\u601  ", '
\f2 \uc0\u4675 
\f0  ': 'q a ', '
\f2 \uc0\u4772 
\f0  ': '\uc0\u702  e ', '
\f2 \uc0\u4760 
\f0  ': '\'f1 \'e4 ', '
\f2 \uc0\u4731 
\f0  ': '\uc0\u269  a ', '
\f2 \uc0\u4814 
\f0 ': 'w o', '
\f2 \uc0\u4648 
\f0  ': 'r \'e4 ', '
\f2 \uc0\u4908 
\f0  ': "\uc0\u269 ' e ", '
\f2 \uc0\u4658 
\f0  ': 's i ', '
\f2 \uc0\u4643 
\f0  ': 's a ', '
\f2 \uc0\u4726 
\f0 ': 't o', '
\f2 \uc0\u4616 
\f0  ': 'l \'e4 ', '
\f2 \uc0\u4781 
\f0  ': 'k \uc0\u601  ', '
\f2 \uc0\u4653 
\f0  ': 'r \uc0\u601  ', '
\f2 \uc0\u4705 
\f0  ': 'b u ', '
\f2 \uc0\u4797 
\f0  ': 'h \uc0\u601  ', '
\f2 \uc0\u4950 
\f0 ': 'p o', '
\f2 \uc0\u4934 
\f0 ': "s' o", '
\f2 \uc0\u4923 
\f0  ': "s' a ", '
\f2 \uc0\u4840 
\f0  ': 'y \'e4 ', '
\f2 \uc0\u4842 
\f0  ': 'y i ', '
\f2 \uc0\u4918 
\f0 ': "p' o", '
\f2 \uc0\u4638 
\f0 ': 'm o', '
\f2 \uc0\u4635 
\f0  ': 'm a ', '
\f2 \uc0\u4637 
\f0  ': 'm \uc0\u601  ', '
\f2 \uc0\u4812 
\f0  ': 'w e ', '
\f2 \uc0\u4740 
\f0  ': 'h e ', '
\f2 \uc0\u4914 
\f0  ': "p' i ", '
\f2 \uc0\u4612 
\f0  ': 'h e ', '
\f2 \uc0\u4741 
\f0  ': 'h \uc0\u601  ', '
\f2 \uc0\u4729 
\f0  ': '\uc0\u269  u ', '
\f2 \uc0\u4819 
\f0  ': '\uc0\u702  a ', '
\f2 \uc0\u4947 
\f0  ': 'p a ', '
\f2 \uc0\u4739 
\f0  ': 'h a ', '
\f2 \uc0\u4665 
\f0  ': '\'9a u ', '
\f2 \uc0\u4829 
\f0  ': 'z \uc0\u601  ', '
\f2 \uc0\u4628 
\f0  ': 'h e ', '
\f2 \uc0\u4906 
\f0  ': "\uc0\u269 ' i ", '
\f2 \uc0\u4662 
\f0 ': 's o', '
\f2 \uc0\u4625 
\f0  ': 'h u ', '
\f2 \uc0\u4770 
\f0  ': '\uc0\u702  i ', '
\f2 \uc0\u4724 
\f0  ': 't e ', '
\f2 \uc0\u4813 
\f0  ': 'w \uc0\u601  ', '
\f2 \uc0\u4937 
\f0  ': 'f u ', '
\f2 \uc0\u4779 
\f0  ': 'k a ', '
\f2 \uc0\u4659 
\f0  ': 's a ', '
\f2 \uc0\u4678 
\f0 ': 'q o', '
\f2 \uc0\u4622 
\f0 ': 'l o', '
\f2 \uc0\u4649 
\f0  ': 'r u ', '
\f2 \uc0\u4754 
\f0  ': 'n i ', '
\f2 \uc0\u4846 
\f0 ': 'y o', '
\f2 \uc0\u4796 
\f0  ': 'h e ', '
\f2 \uc0\u4851 
\f0  ': 'd a ', '
\f2 \uc0\u4651 
\f0  ': 'r a ', '
\f2 \uc0\u4676 
\f0  ': 'q e ', '
\f2 \uc0\u4738 
\f0  ': 'h i ', '
\f2 \uc0\u4766 
\f0 ': '\'f1 o', '
\f2 \uc0\u4737 
\f0  ': 'h u ', '
\f2 \uc0\u4902 
\f0 ': "t' o", '
\f2 \uc0\u4654 
\f0 ': 'r o', '
\f2 \uc0\u4764 
\f0  ': '\'f1 e ', '
\f2 \uc0\u4721 
\f0  ': 't u ', '
\f2 \uc0\u4728 
\f0  ': '\uc0\u269  \'e4 ', '
\f2 \uc0\u4845 
\f0  ': 'y \uc0\u601  '\}
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = []
\f1\fs24 \

\f0\fs32 line = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countcolumns = 0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.split('\\t') \'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines == 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0vocals.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns == 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0consonants.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0alphabet.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0for letter in alphabet:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0letter = consonants[countlines-1] + vocals[countcolumns-1]
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0countcolumns+=1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countlines+=1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32 print(letter)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf3 \uc0\u1060 \u1080 \u1075 \u1085 \u1103 :
\f1\b0\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = []
\f1\fs24 \

\f0\fs32 line = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countcolumns = 0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.split('\\t') \'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines == 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0vocals.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns == 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0consonants.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0alphabet.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0for letter in alphabet:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0letter = consonants[-1] + vocals[-1]
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0countcolumns+=1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countlines+=1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32 print(letter)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = \{\}
\f1\fs24 \

\f0\fs32 lines = []
\f1\fs24 \

\f0\fs32 line = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countcolumns = 0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.split('\\t') \'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines == 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0vocals.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns == 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0consonants.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0alphabet[ch] = 'consonants'[0]+'vocals'[4] \'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3  \'a0\'a0\'a0\'a0\'a0\'a0\'a0countcolumns+=1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countlines+=1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32 print(consonants[0])
\f1\fs24 \

\f0\fs32 print(vocals[4])
\f1\fs24 \

\f0\fs32 print(alphabet)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf3 \uc0\u1056 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 :
\f1\b0\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 h 
\f1\fs24 \

\f0\fs32 e 
\f1\fs24 \

\f0\fs32 \{'
\f2 \uc0\u4797 
\f0  ': 'cl', '
\f2 \uc0\u4633 
\f0  ': 'cl', '
\f2 \uc0\u4808 
\f0  ': 'cl', '
\f2 \uc0\u4821 
\f0  ': 'cl', '
\f2 \uc0\u4908 
\f0  ': 'cl', '
\f2 \uc0\u4829 
\f0  ': 'cl', '
\f2 \uc0\u4648 
\f0  ': 'cl', '
\f2 \uc0\u4617 
\f0  ': 'cl', '
\f2 \uc0\u4658 
\f0  ': 'cl', '
\f2 \uc0\u4809 
\f0  ': 'cl', '
\f2 \uc0\u4649 
\f0  ': 'cl', '
\f2 \uc0\u4710 
\f0 ': 'cl', '
\f2 \uc0\u4728 
\f0  ': 'cl', '
\f2 \uc0\u4921 
\f0  ': 'cl', '
\f2 \uc0\u4844 
\f0  ': 'cl', '
\f2 \uc0\u4726 
\f0 ': 'cl', '
\f2 \uc0\u4674 
\f0  ': 'cl', '
\f2 \uc0\u4641 
\f0  ': 'cl', '
\f2 \uc0\u4721 
\f0  ': 'cl', '
\f2 \uc0\u4625 
\f0  ': 'cl', '
\f2 \uc0\u4614 
\f0 ': 'cl', '
\f2 \uc0\u4877 
\f0  ': 'cl', '
\f2 \uc0\u4659 
\f0  ': 'cl', '
\f2 \uc0\u4945 
\f0  ': 'cl', '
\f2 \uc0\u4768 
\f0  ': 'cl', '
\f2 \uc0\u4898 
\f0  ': 'cl', '
\f2 \uc0\u4828 
\f0  ': 'cl', '
\f2 \uc0\u4902 
\f0 ': 'cl', '
\f2 \uc0\u4732 
\f0  ': 'cl', '
\f2 \uc0\u4734 
\f0 ': 'cl', '
\f2 \uc0\u4616 
\f0  ': 'cl', '
\f2 \uc0\u4901 
\f0  ': 'cl', '
\f2 \uc0\u4906 
\f0  ': 'cl', '
\f2 \uc0\u4946 
\f0  ': 'cl', '
\f2 \uc0\u4925 
\f0  ': 'cl', '
\f2 \uc0\u4810 
\f0  ': 'cl', '
\f2 \uc0\u4929 
\f0  ': 'cl', '
\f2 \uc0\u4796 
\f0  ': 'cl', '
\f2 \uc0\u4765 
\f0  ': 'cl', '
\f2 \uc0\u4753 
\f0  ': 'cl', '
\f2 \uc0\u4618 
\f0  ': 'cl', '
\f2 \uc0\u4666 
\f0  ': 'cl', '
\f2 \uc0\u4841 
\f0  ': 'cl', '
\f2 \uc0\u4869 
\f0  ': 'cl', '
\f2 \uc0\u4853 
\f0  ': 'cl', '
\f2 \uc0\u4638 
\f0 ': 'cl', '
\f2 \uc0\u4779 
\f0  ': 'cl', '
\f2 \uc0\u4922 
\f0  ': 'cl', '
\f2 \uc0\u4656 
\f0  ': 'cl', '
\f2 \uc0\u4931 
\f0  ': 'cl', '
\f2 \uc0\u4848 
\f0  ': 'cl', '
\f2 \uc0\u4740 
\f0  ': 'cl', '
\f2 \uc0\u4752 
\f0  ': 'cl', '
\f2 \uc0\u4762 
\f0  ': 'cl', '
\f2 \uc0\u4915 
\f0  ': 'cl', '
\f2 \uc0\u4849 
\f0  ': 'cl', '
\f2 \uc0\u4926 
\f0 ': 'cl', '
\f2 \uc0\u4769 
\f0  ': 'cl', '
\f2 \uc0\u4608 
\f0  ': 'cl', '
\f2 \uc0\u4835 
\f0  ': 'cl', '
\f2 \uc0\u4818 
\f0  ': 'cl', '
\f2 \uc0\u4820 
\f0  ': 'cl', '
\f2 \uc0\u4630 
\f0 ': 'cl', '
\f2 \uc0\u4918 
\f0 ': 'cl', '
\f2 \uc0\u4635 
\f0  ': 'cl', '
\f2 \uc0\u4873 
\f0  ': 'cl', '
\f2 \uc0\u4910 
\f0 ': 'cl', '
\f2 \uc0\u4720 
\f0  ': 'cl', '
\f2 \uc0\u4832 
\f0  ': 'cl', '
\f2 \uc0\u4843 
\f0  ': 'cl', '
\f2 \uc0\u4819 
\f0  ': 'cl', '
\f2 \uc0\u4870 
\f0 ': 'cl', '
\f2 \uc0\u4899 
\f0  ': 'cl', '
\f2 \uc0\u4822 
\f0 ': 'cl', '
\f2 \uc0\u4705 
\f0  ': 'cl', '
\f2 \uc0\u4876 
\f0  ': 'cl', '
\f2 \uc0\u4851 
\f0  ': 'cl', '
\f2 \uc0\u4776 
\f0  ': 'cl', '
\f2 \uc0\u4941 
\f0  ': 'cl', '
\f2 \uc0\u4772 
\f0  ': 'cl', '
\f2 \uc0\u4758 
\f0 ': 'cl', '
\f2 \uc0\u4913 
\f0  ': 'cl', '
\f2 \uc0\u4814 
\f0 ': 'cl', '
\f2 \uc0\u4676 
\f0  ': 'cl', '
\f2 \uc0\u4950 
\f0 ': 'cl', '
\f2 \uc0\u4904 
\f0  ': 'cl', '
\f2 \uc0\u4766 
\f0 ': 'cl', '
\f2 \uc0\u4704 
\f0  ': 'cl', '
\f2 \uc0\u4778 
\f0  ': 'cl', '
\f2 \uc0\u4657 
\f0  ': 'cl', '
\f2 \uc0\u4942 
\f0 ': 'cl', '
\f2 \uc0\u4756 
\f0  ': 'cl', '
\f2 \uc0\u4834 
\f0  ': 'cl', '
\f2 \uc0\u4677 
\f0  ': 'cl', '
\f2 \uc0\u4932 
\f0  ': 'cl', '
\f2 \uc0\u4654 
\f0 ': 'cl', '
\f2 \uc0\u4661 
\f0  ': 'cl', '
\f2 \uc0\u4722 
\f0  ': 'cl', '
\f2 \uc0\u4900 
\f0  ': 'cl', '
\f2 \uc0\u4826 
\f0  ': 'cl', '
\f2 \uc0\u4781 
\f0  ': 'cl', '
\f2 \uc0\u4646 
\f0 ': 'cl', '
\f2 \uc0\u4897 
\f0  ': 'cl', '
\f2 \uc0\u4672 
\f0  ': 'cl', '
\f2 \uc0\u4836 
\f0  ': 'cl', '
\f2 \uc0\u4763 
\f0  ': 'cl', '
\f2 \uc0\u4827 
\f0  ': 'cl', '
\f2 \uc0\u4651 
\f0  ': 'cl', '
\f2 \uc0\u4662 
\f0 ': 'cl', '
\f2 \uc0\u4813 
\f0  ': 'cl', '
\f2 \uc0\u4928 
\f0  ': 'cl', '
\f2 \uc0\u4850 
\f0  ': 'cl', '
\f2 \uc0\u4865 
\f0  ': 'cl', '
\f2 \uc0\u4612 
\f0  ': 'cl', '
\f2 \uc0\u4846 
\f0 ': 'cl', '
\f2 \uc0\u4724 
\f0  ': 'cl', '
\f2 \uc0\u4866 
\f0  ': 'cl', '
\f2 \uc0\u4933 
\f0  ': 'cl', '
\f2 \uc0\u4675 
\f0  ': 'cl', '
\f2 \uc0\u4673 
\f0  ': 'cl', '
\f2 \uc0\u4731 
\f0  ': 'cl', '
\f2 \uc0\u4924 
\f0  ': 'cl', '
\f2 \uc0\u4947 
\f0  ': 'cl', '
\f2 \uc0\u4905 
\f0  ': 'cl', '
\f2 \uc0\u4613 
\f0  ': 'cl', '
\f2 \uc0\u4909 
\f0  ': 'cl', '
\f2 \uc0\u4669 
\f0  ': 'cl', '
\f2 \uc0\u4875 
\f0  ': 'cl', '
\f2 \uc0\u4794 
\f0  ': 'cl', '
\f2 \uc0\u4628 
\f0  ': 'cl', '
\f2 \uc0\u4708 
\f0  ': 'cl', '
\f2 \uc0\u4706 
\f0  ': 'cl', '
\f2 \uc0\u4916 
\f0  ': 'cl', '
\f2 \uc0\u4725 
\f0  ': 'cl', '
\f2 \uc0\u4874 
\f0  ': 'cl', '
\f2 \uc0\u4896 
\f0  ': 'cl', '
\f2 \uc0\u4864 
\f0  ': 'cl', '
\f2 \uc0\u4792 
\f0  ': 'cl', '
\f2 \uc0\u4619 
\f0  ': 'cl', '
\f2 \uc0\u4920 
\f0  ': 'cl', '
\f2 \uc0\u4723 
\f0  ': 'cl', '
\f2 \uc0\u4640 
\f0  ': 'cl', '
\f2 \uc0\u4730 
\f0  ': 'cl', '
\f2 \uc0\u4937 
\f0  ': 'cl', '
\f2 \uc0\u4742 
\f0 ': 'cl', '
\f2 \uc0\u4798 
\f0 ': 'cl', '
\f2 \uc0\u4842 
\f0  ': 'cl', '
\f2 \uc0\u4837 
\f0  ': 'cl', '
\f2 \uc0\u4754 
\f0  ': 'cl', '
\f2 \uc0\u4940 
\f0  ': 'cl', '
\f2 \uc0\u4667 
\f0  ': 'cl', '
\f2 \uc0\u4678 
\f0 ': 'cl', '
\f2 \uc0\u4793 
\f0  ': 'cl', '
\f2 \uc0\u4770 
\f0  ': 'cl', '
\f2 \uc0\u4634 
\f0  ': 'cl', '
\f2 \uc0\u4812 
\f0  ': 'cl', '
\f2 \uc0\u4816 
\f0  ': 'cl', '
\f2 \uc0\u4733 
\f0  ': 'cl', '
\f2 \uc0\u4670 
\f0 ': 'cl', '
\f2 \uc0\u4934 
\f0 ': 'cl', '
\f2 \uc0\u4611 
\f0  ': 'cl', '
\f2 \uc0\u4825 
\f0  ': 'cl', '
\f2 \uc0\u4652 
\f0  ': 'cl', '
\f2 \uc0\u4709 
\f0  ': 'cl', '
\f2 \uc0\u4777 
\f0  ': 'cl', '
\f2 \uc0\u4760 
\f0  ': 'cl', '
\f2 \uc0\u4771 
\f0  ': 'cl', '
\f2 \uc0\u4627 
\f0  ': 'cl', '
\f2 \uc0\u4867 
\f0  ': 'cl', '
\f2 \uc0\u4729 
\f0  ': 'cl', '
\f2 \uc0\u4824 
\f0  ': 'cl', '
\f2 \uc0\u4817 
\f0  ': 'cl', '
\f2 \uc0\u4948 
\f0  ': 'cl', '
\f2 \uc0\u4795 
\f0  ': 'cl', '
\f2 \uc0\u4622 
\f0 ': 'cl', '
\f2 \uc0\u4609 
\f0  ': 'cl', '
\f2 \uc0\u4645 
\f0  ': 'cl', '
\f2 \uc0\u4632 
\f0  ': 'cl', '
\f2 \uc0\u4833 
\f0  ': 'cl', '
\f2 \uc0\u4637 
\f0  ': 'cl', '
\f2 \uc0\u4917 
\f0  ': 'cl', '
\f2 \uc0\u4914 
\f0  ': 'cl', '
\f2 \uc0\u4610 
\f0  ': 'cl', '
\f2 \uc0\u4912 
\f0  ': 'cl', '
\f2 \uc0\u4878 
\f0 ': 'cl', '
\f2 \uc0\u4780 
\f0  ': 'cl', '
\f2 \uc0\u4939 
\f0  ': 'cl', '
\f2 \uc0\u4944 
\f0  ': 'cl', '
\f2 \uc0\u4938 
\f0  ': 'cl', '
\f2 \uc0\u4660 
\f0  ': 'cl', '
\f2 \uc0\u4936 
\f0  ': 'cl', '
\f2 \uc0\u4664 
\f0  ': 'cl', '
\f2 \uc0\u4761 
\f0  ': 'cl', '
\f2 \uc0\u4643 
\f0  ': 'cl', '
\f2 \uc0\u4738 
\f0  ': 'cl', '
\f2 \uc0\u4707 
\f0  ': 'cl', '
\f2 \uc0\u4949 
\f0  ': 'cl', '
\f2 \uc0\u4764 
\f0  ': 'cl', '
\f2 \uc0\u4757 
\f0  ': 'cl', '
\f2 \uc0\u4621 
\f0  ': 'cl', '
\f2 \uc0\u4923 
\f0  ': 'cl', '
\f2 \uc0\u4774 
\f0 ': 'cl', '
\f2 \uc0\u4739 
\f0  ': 'cl', '
\f2 \uc0\u4736 
\f0  ': 'cl', '
\f2 \uc0\u4840 
\f0  ': 'cl', '
\f2 \uc0\u4668 
\f0  ': 'cl', '
\f2 \uc0\u4907 
\f0  ': 'cl', '
\f2 \uc0\u4782 
\f0 ': 'cl', '
\f2 \uc0\u4644 
\f0  ': 'cl', '
\f2 \uc0\u4629 
\f0  ': 'cl', '
\f2 \uc0\u4642 
\f0  ': 'cl', '
\f2 \uc0\u4620 
\f0  ': 'cl', '
\f2 \uc0\u4741 
\f0  ': 'cl', '
\f2 \uc0\u4930 
\f0  ': 'cl', '
\f2 \uc0\u4872 
\f0  ': 'cl', '
\f2 \uc0\u4626 
\f0  ': 'cl', '
\f2 \uc0\u4636 
\f0  ': 'cl', '
\f2 \uc0\u4665 
\f0  ': 'cl', '
\f2 \uc0\u4852 
\f0  ': 'cl', '
\f2 \uc0\u4650 
\f0  ': 'cl', '
\f2 \uc0\u4737 
\f0  ': 'cl', '
\f2 \uc0\u4868 
\f0  ': 'cl', '
\f2 \uc0\u4838 
\f0 ': 'cl', '
\f2 \uc0\u4811 
\f0  ': 'cl', '
\f2 \uc0\u4773 
\f0  ': 'cl', '
\f2 \uc0\u4755 
\f0  ': 'cl', '
\f2 \uc0\u4830 
\f0 ': 'cl', '
\f2 \uc0\u4845 
\f0  ': 'cl', '
\f2 \uc0\u4653 
\f0  ': 'cl', '
\f2 \uc0\u4624 
\f0  ': 'cl', '
\f2 \uc0\u4854 
\f0 ': 'cl'\}
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = \{\}
\f1\fs24 \

\f0\fs32 lines = []
\f1\fs24 \

\f0\fs32 line = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countcolumns = 0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.split('\\t') \'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines == 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0vocals.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns == 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0consonants.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0alphabet[ch] = 'consonants'[5]+'vocals'[1] \'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0countcolumns+=1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countlines+=1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32 print(alphabet)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf2 \strokec2 \uc0\u1055 \u1088 \u1080 \u1089 \u1074 \u1086 \u1080 \u1083  \u1074 \u1089 \u1077 \u1084  \u1072 \u1084 \u1093 \u1072 \u1088 \u1089 \u1082 \u1080 \u1084  \u1073 \u1091 \u1082 \u1074 \u1072 \u1084  \u1079 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1103  \'93so\'94, \u1087 \u1086 \u1095 \u1077 \u1084 \u1091 -\u1090 \u1086  \u1073 \u1091 \u1082 \u1074 \u1099  \u1101 \u1090 \u1080  \u1074 \u1099 \u1087 \u1072 \u1076 \u1072 \u1102 \u1090  \u1074  \u1089 \u1083 \u1091 \u1095 \u1072 \u1081 \u1085 \u1086 \u1084  \u1087 \u1086 \u1088 \u1103 \u1076 \u1082 \u1077 :
\f1\b0\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = \{\}
\f1\fs24 \

\f0\fs32 lines = []
\f1\fs24 \

\f0\fs32 line = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countcolumns = 0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.split('\\t') \'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines == 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0vocals.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns == 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0consonants.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0alphabet[ch] = 'consonants'[3]+'vocals'[1] \'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0countcolumns+=1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countlines+=1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32 print(alphabet)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf2 \strokec2 \uc0\u1055 \u1088 \u1072 \u1074 \u1080 \u1083 \u1100 \u1085 \u1099 \u1077  \u1075 \u1083 \u1072 \u1089 \u1085 \u1099 \u1077  \u1080  \u1089 \u1086 \u1075 \u1083 \u1072 \u1089 \u1085 \u1099 \u1077 :
\f1\b0\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = \{\}
\f1\fs24 \

\f0\fs32 lines = []
\f1\fs24 \

\f0\fs32 line = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countcolumns = 0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.split('\\t') \'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines == 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0vocals.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns == 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0consonants.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0countcolumns+=1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countlines+=1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32 print(consonants)
\f1\fs24 \

\f0\fs32 print(vocals)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf3 \uc0\u1056 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 :
\f1\b0\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 ['h ', 'l ', 'h ', 'm ', 's ', 'r ', 's ', '\'9a ', 'q ', 'b ', 't ', '\uc0\u269  ', 'h ', 'n ', '\'f1 ', '\u702  ', 'k ', 'h ', 'w ', '\u702  ', 'z ', '\'9e ', 'y ', 'd ', '\u487  ', 'g ', "t' ", "\u269 ' ", "p' ", "s' ", "s' ", 'f ', 'p ']
\f1\fs24 \

\f0\fs32 ['\'e4 ', 'u ', 'i ', 'a ', 'e ', '\uc0\u601  ', 'o']
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf2 \strokec2 \uc0\u1055 \u1088 \u1072 \u1074 \u1080 \u1083 \u1100 \u1085 \u1099 \u1077  \u1075 \u1083 \u1072 \u1089 \u1085 \u1099 \u1077  \u1087 \u1083 \u1102 \u1089  \u1086 \u1076 \u1080 \u1085  \u1089 \u1086 \u1075 \u1083 \u1072 \u1089 \u1085 \u1099 \u1081 :
\f1\b0\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 countcolumns = 0 
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = \{\}
\f1\fs24 \

\f0\fs32 lines = []
\f1\fs24 \

\f0\fs32 line = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file: \'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.split('\\t') \'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines == 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0vocals.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns == 8:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0consonants.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0countcolumns+=1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countlines+=1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32 print(consonants)
\f1\fs24 \

\f0\fs32 print(vocals)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf3 \uc0\u1056 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 :
\f1\b0\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 ['h ']
\f1\fs24 \

\f0\fs32 ['\'e4 ', 'u ', 'i ', 'a ', 'e ', '\uc0\u601  ', 'o']
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf2 \strokec2 \uc0\u1055 \u1088 \u1072 \u1074 \u1080 \u1083 \u1100 \u1085 \u1086  \u1085 \u1072 \u1087 \u1077 \u1095 \u1072 \u1090 \u1072 \u1083  \u1075 \u1083 \u1072 \u1089 \u1085 \u1099 \u1077 :
\f1\b0\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 countcolumns = 0 
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = \{\}
\f1\fs24 \

\f0\fs32 lines = []
\f1\fs24 \

\f0\fs32 line = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.split('\\t') \'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines == 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0vocals.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines != 0 and countcolumns == 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0consonants.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0countcolumns+=1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countlines+=1
\f1\fs24 \

\f0\fs32 print(consonants)
\f1\fs24 \

\f0\fs32 print(vocals)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\i\b\fs32 \cf3 \uc0\u1056 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 :
\i0\b0  []
\f1\fs24 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 ['\'e4 ', 'u ', 'i ', 'a ', 'e ', '\uc0\u601  ', 'o']
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 countcolumns = 0 
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = \{\}
\f1\fs24 \

\f0\fs32 lines = []
\f1\fs24 \

\f0\fs32 line = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line = line.split('\\t')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0consonants.append(line[0])
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0if countlines == 0: 
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0vocals.append(line)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countlines+=1
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 print(consonants)
\f1\fs24 \

\f0\fs32 print(vocals)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\i\fs32 \cf3 \uc0\u1056 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 :
\f1\i0\fs24 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 [' ', 'h ', 'l ', 'h ', 'm ', 's ', 'r ', 's ', '\'9a ', 'q ', 'b ', 't ', '\uc0\u269  ', 'h ', 'n ', '\'f1 ', '\u702  ', 'k ', 'h ', 'w ', '\u702  ', 'z ', '\'9e ', 'y ', 'd ', '\u487  ', 'g ', "t' ", "\u269 ' ", "p' ", "s' ", "s' ", 'f ', 'p ']
\f1\fs24 \

\f0\fs32 [[' ', '\'e4 ', 'u ', 'i ', 'a ', 'e ', '\uc0\u601  ', 'o']]
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 countcolumns = 0 
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = \{\}
\f1\fs24 \

\f0\fs32 lines = []
\f1\fs24 \

\f0\fs32 line = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.split('\\t')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0consonants.append(line[0])
\f1\fs24 \

\f0\fs32 vocals.append(line)
\f1\fs24 \

\f0\fs32 print(consonants)
\f1\fs24 \

\f0\fs32 print(vocals)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\i\fs32 \cf3 \uc0\u1056 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 :
\f1\i0\fs24 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 [' ', 'h', 'l', 'h', 'm', 's', 'r', 's', '\'9a', 'q', 'b', 't', '\uc0\u269 ', 'h', 'n', '\'f1', '\u702 ', 'k', 'h', 'w', '\u702 ', 'z', '\'9e', 'y', 'd', '\u487 ', 'g', 't', '\u269 ', 'p', 's', 's', 'f', 'p']
\f1\fs24 \

\f0\fs32 ['p \\t
\f2 \uc0\u4944 
\f0  \\t
\f2 \uc0\u4945 
\f0  \\t
\f2 \uc0\u4946 
\f0  \\t
\f2 \uc0\u4947 
\f0  \\t
\f2 \uc0\u4948 
\f0  \\t
\f2 \uc0\u4949 
\f0  \\t
\f2 \uc0\u4950 
\f0 ']
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf3 \uc0\u1053 \u1072 \u1087 \u1077 \u1095 \u1072 \u1090 \u1072 \u1083  \u1090 \u1086 \u1083 \u1100 \u1082 \u1086  \u1087 \u1077 \u1088 \u1074 \u1091 \u1102  \u1082 \u1086 \u1083 \u1086 \u1085 \u1082 \u1091  (\u1087 \u1088 \u1086 \u1073 \u1077 \u1083 , \u1087 \u1086 \u1090 \u1086 \u1084  h \u1080  \u1090 .\u1076 . \u1076 \u1086  
\i p
\i0 )
\f1\b0\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 countcolumns = 0 
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = \{\}
\f1\fs24 \

\f0\fs32 lines = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.split('\\t')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0print(line[0])
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 countcolumns = 0 
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = \{\}
\f1\fs24 \

\f0\fs32 lines = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.split('\\t')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0lines.append(line)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0print(lines[0])
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\i\fs32 \cf3 \uc0\u1056 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 :
\f1\i0\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\i\fs32 \cf3  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'e4 \'a0\'a0\'a0\'a0\'a0\'a0u \'a0\'a0\'a0\'a0\'a0\'a0i \'a0\'a0\'a0\'a0\'a0\'a0a \'a0\'a0\'a0\'a0\'a0\'a0e \'a0\'a0\'a0\'a0\'a0\'a0\uc0\u601  \'a0\'a0\'a0\'a0\'a0\'a0o
\f1\i0\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\i\fs32 \cf3 (34 \uc0\u1088 \u1072 \u1079 \u1072 )
\f1\i0\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 countcolumns = 0 
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = \{\}
\f1\fs24 \

\f0\fs32 lines = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.split('\\t')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0lines.append(line)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0print(lines[0:1])
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 \uc0\u1056 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 :
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \

\f0\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf3 \uc0\u1056 \u1072 \u1089 \u1087 \u1077 \u1095 \u1072 \u1090 \u1072 \u1083  \u1074  \u1074 \u1080 \u1076 \u1077 
\f1\b0\fs24 \

\f0\b\fs32 [' \\t\'e4 \\tu \\ti \\ta \\te \\t\uc0\u601  \\to\\n']:
\f1\b0\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 countcolumns = 0 
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = \{\}
\f1\fs24 \

\f0\fs32 lines = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.split('\\t')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0lines.append(line)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 print(lines[0:1])
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf3 \uc0\u1056 \u1072 \u1089 \u1087 \u1077 \u1095 \u1072 \u1090 \u1072 \u1083  \u1090 \u1086 \u1083 \u1100 \u1082 \u1086  \u1087 \u1077 \u1088 \u1074 \u1091 \u1102  \u1089 \u1090 \u1088 \u1086 \u1082 \u1091 :
\f1\b0\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 countcolumns = 0 
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = \{\}
\f1\fs24 \

\f0\fs32 lines = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.split('\\t')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0lines.append(line)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 print(lines[0])
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\i\fs32 \cf3 \uc0\u1056 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 : \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'e4 \'a0\'a0\'a0\'a0\'a0\'a0u \'a0\'a0\'a0\'a0\'a0\'a0i \'a0\'a0\'a0\'a0\'a0\'a0a \'a0\'a0\'a0\'a0\'a0\'a0e \'a0\'a0\'a0\'a0\'a0\'a0\u601  \'a0\'a0\'a0\'a0\'a0\'a0o
\f1\i0\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 file = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 countlines = 0
\f1\fs24 \

\f0\fs32 countcolumns = 0 
\f1\fs24 \

\f0\fs32 vocals = []
\f1\fs24 \

\f0\fs32 consonants = []
\f1\fs24 \

\f0\fs32 alphabet = \{\}
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in file:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.split('\\t')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countcolumns += 1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countlines == 0 and countcolumns != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0vocals.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32 print(vocals)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 tsplit = line.split("\\t")
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0text = text.replace('0', '')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0f3.write (tsplit)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 f2.close()
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 import re
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 f1 = open ('Tablichka.tsv', 'r', encoding = 'utf8')
\f1\fs24 \

\f0\fs32 text = f1.read()
\f1\fs24 \

\f0\fs32 f2 = open ('Amkhar_r.txt', 'r', encoding = 'utf8')
\f1\fs24 \

\f0\fs32 f3 = open ('Amkhar_w.txt', 'w', encoding = 'utf8')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in f1:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0tsplit = line.split("\\t")
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3  \'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0firstcolumns = tsplit[:-1]
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0lastitems = tsplit[-1].strip().split(";")
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0for item in lastitems:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0allcolumns = firstcolumns + item.split("=")
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0outfile.write("\\t".join(allcolumns) + "\\n")
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 rtn = re.split('([.!?\\n] *)', text)
\f1\fs24 \

\f0\fs32 final = ''.join([i.capitalize() for i in rtn])
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 text = text.replace('
\f3 \uc0\u4304 
\f0 ', 'a')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 f2.write (final)
\f1\fs24 \

\f0\fs32 f2.close() \'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf3 \uc0\u1042 \u1089 \u1105  \u1085 \u1077  \u1090 \u1072 \u1082 , \u1087 \u1099 \u1090 \u1072 \u1102 \u1089 \u1100  \u1085 \u1072 \u1097 \u1091 \u1087 \u1099 \u1074 \u1072 \u1090 \u1100  \u1089 \u1090 \u1088 \u1086 \u1082 \u1080  \u1080  \u1089 \u1090 \u1086 \u1083 \u1073 \u1094 \u1099 :
\f1\b0\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 f1 = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \

\f0\fs32 table = f1.read()
\f1\fs24 \

\f0\fs32 line = table.split('\\n')
\f1\fs24 \

\f0\fs32 line = table.split('\\t')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 vow = []
\f1\fs24 \

\f0\fs32 cons = []
\f1\fs24 \

\f0\fs32 alph = \{\}
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 print(line)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf3 \uc0\u1053 \u1077  \u1092 \u1091 \u1088 \u1099 \u1095 \u1080 \u1090 
\f1\b0\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 f1 = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \

\f0\fs32 table = f1.read()
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 vow = []
\f1\fs24 \

\f0\fs32 cons = []
\f1\fs24 \

\f0\fs32 alph = \{\}
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in table:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countL = 0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0countCh = 0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countL==0 and countCh!=0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0vow.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countL!=0 and countCh==0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0cons.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if countL!=0 and countCh!=0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0alph[ch] = cons[countL-1]+voc[countCh-1]
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0print(cons)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0countCh+=1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0countL+=1 
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 f1 = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \

\f0\fs32 table = f1.read()
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 \uc0\u1089  = 0
\f1\fs24 \

\f0\fs32 voc = []
\f1\fs24 \

\f0\fs32 cons = []
\f1\fs24 \

\f0\fs32 alph = \{\}
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in table:
\f1\fs24 \

\f0\fs32 	line.strip('\\n')
\f1\fs24 \

\f0\fs32 	line.split('\\t')
\f1\fs24 \

\f0\fs32 	v = 0
\f1\fs24 \

\f0\fs32 	\uc0\u1089  = 0
\f1\fs24 \

\f0\fs32 	for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0	 \'a0\'a0\'a0if c==0 and v!=0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0	 \'a0\'a0\'a0\'a0\'a0\'a0\'a0voc.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0	 \'a0\'a0\'a0v+=1 \'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0	 \'a0\'a0\'a0print(voc)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0	 
\f1\fs24 \

\f0\fs32  \'a0\'a0	 
\f1\fs24 \

\f0\fs32 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf3 \uc0\u1050 \u1072 \u1082 \u1072 \u1103 -\u1090 \u1086  \u1093 \u1088 \u1077 \u1085 \u1100 :
\f1\b0\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 import csv
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 with open ('amkharsky.tsv', 'r', encoding = 'utf8') as file1:
\f1\fs24 \

\f0\fs32 	table = csv.reader(file1, delimiter='\\t')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 	c = 0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0
\f1\fs24 \

\f0\fs32 	voc = []
\f1\fs24 \

\f0\fs32 	cons = []
\f1\fs24 \

\f0\fs32 	alph = \{\}
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 	for row in table:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0	v = 0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0	for ch in row:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0	if c==0 and v!=0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0	voc.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0	v+=1 \'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0	print(voc)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 import csv
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 with open ('amkharsky.tsv', 'r', encoding = 'utf8') as file1:
\f1\fs24 \

\f0\fs32 	table = csv.reader(file1, delimiter='\\t')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 	c = 0
\f1\fs24 \

\f0\fs32 	voc = []
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 	for line in table:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0	if c!=0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0	voc.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0	print(voc)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0	c+=1
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf2 \strokec2 \uc0\u1055 \u1086 \u1083 \u1091 \u1095 \u1080 \u1083 \u1086 \u1089 \u1100  \u1085 \u1072 \u1087 \u1077 \u1095 \u1072 \u1090 \u1072 \u1090 \u1100  \u1090 \u1086 \u1083 \u1100 \u1082 \u1086  \u1087 \u1086 \u1089 \u1083 \u1077 \u1076 \u1085 \u1080 \u1081  \u1089 \u1090 \u1086 \u1083 \u1073 \u1077 \u1094 :
\f1\b0\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 import csv
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 with open ('amkharsky.tsv', 'r', encoding = 'utf8') as file1:
\f1\fs24 \

\f0\fs32 	table = csv.reader(file1, delimiter='\\t')
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 	c = 0
\f1\fs24 \

\f0\fs32 	voc = []
\f1\fs24 \

\f0\fs32 	cons = []
\f1\fs24 \

\f0\fs32 	alph = \{\}
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 	for line in table:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0	print(line[-1])
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 f1 = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \

\f0\fs32 table = f1.read()
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 c = int(c)
\f1\fs24 \

\f0\fs32 c = 0
\f1\fs24 \

\f0\fs32 voc = []
\f1\fs24 \

\f0\fs32 cons = []
\f1\fs24 \

\f0\fs32 alph = \{\}
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in table:
\f1\fs24 \

\f0\fs32 	line.strip('\\n')
\f1\fs24 \

\f0\fs32 	line.split('\\t')
\f1\fs24 \

\f0\fs32 c += 1
\f1\fs24 \

\f0\fs32 print(line)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 f1 = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \

\f0\fs32 table = f1.read()
\f1\fs24 \

\f0\fs32 for line in table:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.split('\\t')
\f1\fs24 \

\f0\fs32 print(line)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 import csv
\f1\fs24 \

\f0\fs32 with open ('amkharsky.tsv', 'r', encoding = 'utf8') as f1:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0table = csv.reader(f1, delimiter = '\\t')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0for line in table:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0print(line)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 f1 = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \

\f0\fs32 table = f1.read()
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 c = 0
\f1\fs24 \

\f0\fs32 voc = []
\f1\fs24 \

\f0\fs32 cons = []
\f1\fs24 \

\f0\fs32 alph = \{\}
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in table:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.split('\\t')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0v = 0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if c == 0 and v != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0voc.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if c != 0 and v == 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0cons.append(ch)
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3  \'a0\'a0\'a0\'a0\'a0\'a0\'a0v += 1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0c += 1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0print(voc)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 f1 = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \

\f0\fs32 table = f1.read()
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 c = 0
\f1\fs24 \

\f0\fs32 voc = []
\f1\fs24 \

\f0\fs32 cons = []
\f1\fs24 \

\f0\fs32 alph = \{\}
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in table:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.split('\\t')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0
\f1\fs24 \

\f0\fs32 v = 0
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 while True:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if c == 0 and v != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0voc.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if c != 0 and v == 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0cons.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0if c != 0 and v != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0alph [ch] = cons [c-1] + voc [v-1]
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0v += 1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0c += 1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0print(alph[ch])
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 f1 = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \

\f0\fs32 table = f1.read()
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 \uc0\u1089  = 0
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in table:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.split('\\t')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0print(line)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0
\f1\fs24 \

\f0\fs32 c += 1
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\b\fs32 \cf2 \strokec2 \uc0\u1053 \u1072 \u1087 \u1077 \u1095 \u1072 \u1090 \u1072 \u1083  \u1087 \u1086  \u1086 \u1095 \u1077 \u1088 \u1077 \u1076 \u1080  \u1074 \u1089 \u1077  \u1073 \u1091 \u1082 \u1074 \u1099 :
\f1\b0\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 f1 = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \

\f0\fs32 table = f1.read()
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 \uc0\u1089  = 0
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in table:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.split('\\t')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0print(line)
\f1\fs24 \

\f0\fs32 c += 1
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 v = 0
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0if c == 0 and v != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0voc.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0if c != 0 and v == 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0cons.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0if c != 0 and v != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0alph [ch] = cons [c-1] + voc [v-1]
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0print(alph)
\f1\fs24 \

\f0\fs32 v += 1
\f1\fs24 \

\f0\fs32 c += 1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 f1 = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \

\f0\fs32 table = f1.read()
\f1\fs24 \

\f0\fs32 c = 0
\f1\fs24 \

\f0\fs32 voc = []
\f1\fs24 \

\f0\fs32 cons = []
\f1\fs24 \

\f0\fs32 alph = \{\}
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for line in table:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.split('\\t')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0
\f1\fs24 \

\f0\fs32 v = 0
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 for ch in line:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0if c == 0 and v != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0voc.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0if c != 0 and v == 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0cons.append(ch)
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0if c != 0 and v != 0:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0alph [ch] = cons [c-1] + voc [v-1]
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0print(alph)
\f1\fs24 \

\f0\fs32 v += 1
\f1\fs24 \

\f0\fs32 c += 1
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\
\
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 *
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf3 f1 = open ('amkharsky.tsv', 'r', encoding = 'utf8')
\f1\fs24 \

\f0\fs32 table = f1.read()
\f1\fs24 \

\f0\fs32 voc = []
\f1\fs24 \

\f0\fs32 cons = []
\f1\fs24 \

\f0\fs32 c = 0
\f1\fs24 \

\f0\fs32 v = 0
\f1\fs24 \

\f0\fs32 for line in table:
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.strip('\\n')
\f1\fs24 \

\f0\fs32  \'a0\'a0\'a0line.split('\\t')
\f1\fs24 \

\f0\fs32 for ch in line:
\f1\fs24 \
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs32 \cf3  \'a0\'a0\'a0if c == 0 and v != 0:}